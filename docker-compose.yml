version: "3.8"

services:
  message-broker:
    image: solace/solace-pubsub-standard:latest
    container_name: solace-pubsub-broker
    volumes:
      - "storage-group:/var/lib/solace"
    shm_size: 1g
    ulimits:
      core: -1
      nofile:
        soft: 2448
        hard: 6592
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1
    ports:
      - "8008:8008"
      - "1443:1443"
      - "1943:1943"
      - "1883:1883"
      - "5671:5671"
      - "5672:5672"
      - "8000:8000"
      - "8443:8443"
      - "8883:8883"
      - "8088:8080"
      - "9000:9000"
      - "9443:9443"
      - "55554:55555"
      - "55003:55003"
      - "55443:55443"
      - "2222:2222"
    environment:
      - username_admin_globalaccesslevel=admin
      - username_admin_password=admin
      - system_scaling_maxconnectioncount=100
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:8080/health-check/"]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 10s
    networks:
      - services-network

  terraform:
    image: hashicorp/terraform:latest
    container_name: terraform
    volumes:
      - ./broker-setup/solace:/workspace
      - ./broker-setup/scripts/setup.sh:/workspace/setup.sh
    working_dir: /workspace
    entrypoint: ["sh", "/workspace/setup.sh"]
    networks:
      - services-network

  pos-service:
    build:
      context: ./pos-service
    deploy:
      replicas: 5
    depends_on:
      terraform:
        condition: service_completed_successfully
      vault:
        condition: service_started
    volumes:
      - ./pos-service/src:/app/src
      - ./pos-service/healthcheck.sh:/app/healthcheck.sh
      - ./vault-setup/services/pos-service/env/.env:/vault-secrets/.env:ro      
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.pos-service.loadbalancer.server.port=8000"
    environment:
      - PYTHONUNBUFFERED=1
      - ENV_FILE_PATH=/vault-secrets/.env
    command: bash /app/healthcheck.sh
    restart: "no"
    networks:
      - services-network

  validation-service:
    build:
      context: ./validation-service
    deploy:
      replicas: 3
    depends_on:
      terraform:
        condition: service_completed_successfully
    volumes:
      - ./validation-service/src:/app/src
      - ./validation-service/healthcheck.sh:/app/healthcheck.sh
      - ./vault-setup/services/validation-service/env/.env:/vault-secrets/.env:ro 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.validation-service.rule=PathPrefix(`/validation-service`)"
      - "traefik.http.services.validation-service.loadbalancer.server.port=8000"
    environment:
      - ENV_FILE_PATH=/vault-secrets/.env
    command: bash /app/healthcheck.sh
    restart: always
    networks:
      - services-network

  traefik:
    image: traefik:v2.5
    container_name: traefik-lb
    depends_on:
      terraform:
        condition: service_completed_successfully
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    labels:
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - services-network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  aggregation-pipeline:
    build:
      context: ./aggregation-pipeline
    depends_on:
      terraform:
        condition: service_completed_successfully
    volumes:
      - ./aggregation-pipeline/src:/app/src
      - ./aggregation-pipeline/healthcheck.sh:/app/healthcheck.sh
      - ./vault-setup/services/aggregation-service/env/.env:/vault-secrets/.env:ro
    environment:
      - ENV_FILE_PATH=/vault-secrets/.env
    command: bash /app/healthcheck.sh
    networks:
      - services-network

  solace-prometheus-exporter:
    image: solacecommunity/solace-prometheus-exporter:latest
    container_name: solace-prometheus-exporter
    platform: linux/amd64
    environment:
      - SOLACE_LISTEN_ADDR=0.0.0.0:9628
      - SOLACE_SCRAPE_URI=http://message-broker:8080
      - SOLACE_USERNAME=admin
      - SOLACE_PASSWORD=admin
      - SOLACE_TIMEOUT=5s
      - SOLACE_SSL_VERIFY=false
      - SOLACE_LISTEN_TLS=false
      - SOLACE_DEFAULT_VPN=default
    ports:
      - "9628:9628"  # Port for Prometheus to scrape metrics
    depends_on:
      terraform:
        condition: service_completed_successfully
    networks:
      - services-network
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    ports:
      - "4318:4318"    # OTLP gRPC
      - "4317:4317"    # OTLP HTTP
      - "9464:9464"    # Prometheus metrics
      - "55681:55681"  # OTLP metrics
    volumes:
      - ./monitoring-service/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config", "/etc/otel-collector-config.yaml"]
    depends_on:
      terraform:
        condition: service_completed_successfully
    networks:
      - services-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    depends_on:
      - otel-collector
    volumes:
      - ./monitoring-service/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
      - "964:9464"
    networks:
      - services-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring-service/grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
    networks:
      - services-network
    depends_on:
      - prometheus
      - otel-collector
      - tempo

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    depends_on:
      - otel-collector
      - prometheus
    ports:
      - "14268:14268"  # HTTP receiver for traces
      - "43172:4317"   # OTLP gRPC receiver
      - "3200:3200"    # Tempo's HTTP API
    volumes:
      - ./monitoring-service/tempo/tempo-data:/var/tempo/traces
      - ./monitoring-service/tempo/tempo-config.yaml:/etc/tempo-config.yaml
    command: ["-config.file=/etc/tempo-config.yaml"]
    networks:
      - services-network

  vault:
    build:
      context: ./vault-setup
      dockerfile: Dockerfile
    container_name: vault
    volumes:
      - ./vault-setup/config:/vault/config
      - ./vault-setup/data:/vault/data
      - ./vault-setup/setup:/vault/setup
      - ./vault-setup/services:/vault/services
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
    ports:
      - "8200:8200"
    command: sh /vault/setup/foreground_job.sh
    restart: unless-stopped

volumes:
  storage-group:

networks:
  services-network:
    driver: bridge
